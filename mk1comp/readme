So this is my compiler for the microprocessor. It is a very rough system and I will almost
Certainly be Remaking it in the future as this was developed in two days of a quisi manic haze.

Prerequisites
You will need pycparser installed in order to use this compiler. https://github.com/eliben/pycparser

Use:
To use simply run the python script mk1comp.py and input the name of a c file sans file exception. Then the compiler will compile 
to assembly and spit out Program.s for the assembly code, Program.d is a secondary output of the assembly process. Finally Program.h
is the executable to be loaded to the Logisim circuit.

Notes:
While in theory this compiler processes c code in reality it compiles c ish. First off the compiler generates c code
Directly from the abstract syntax tree. This means that there is no type checking or other syntax analysis. Additionally 
the code will be horrifically inefficient. STR ,SP,1,0 - LDA ,SP,1,0 - INC SP,SP,0 is not a abnormal output.
Additionally unary operations will be odd. p++ and p-- are implemended but not --p and ++p. &x will return addresses so 
yay! *x is the odd one out though. there is no such thing as a pointer declaration in c ish. *(expr) means save or load
to the address calculated by this expression. 

finally this this is choppy implemented so some new renovations will be coming. first off Im going to build a simpler 
but more elegant compiler. the new compiler will only have hex, binary,integer, address, and variable types. variable 
declarations will only be vectors. second off at some point Ill half to redesign the JMP command to a branch and not
to raw addresses. Really if someone builds a program for this thing longer then 32768 words ill be thoroughly impressed. 

Happy coding!
