Prerequisites
You will need pycparser installed in order to use the front and middle end. https://github.com/eliben/pycparser
the assembler requires no prerequisits.

Use:
To use simply run the python script front_end.py and input the name of a c file sans file exception. Then the compiler will compile 
to assembly and spit out Program.s for the assembly code, Program.d is a secondary output of the assembly process. Finally Program.h
is the executable to be loaded to the Logisim circuit. 
If you wish to assemble assembly code insted simply run the backend.py file. this will assemble a .h and .d file from a .s file

Notes:
While in theory this compiler processes c code in reality it compiles c ish. First off the compiler generates c code
Directly from the abstract syntax tree. This means that there is no type checking or other syntax analysis. Additionally 
the code will be horrifically inefficient. STR ,SP,1,0 - LDA ,SP,1,0 - INC SP,SP,0 is not a abnormal output.
Additionally unary operations will be odd. p++ and p-- are implemended but not --p and ++p. &x will return addresses so 
yay! *x is the odd one out though. there is no such thing as a pointer declaration in c ish. *(expr) means save or load
to the address calculated by this expression.Note to pass global arrays passing the address is needed not "Print(message)" 
but Print(&message)

Not implemented:
-no type checking
-no pointer decleraton to load and store to a pointer * operator will allways need to be used

Update Log
-Improved frontend to improve readability.
-Improved Backend/assembler so that it is less of a mess and improved redility.
-Changed how function prolog and epilogue work insted of each deleration moving the
Stack pointer the stackpointer moves up and down the number of local varibles at the start
of a method.
-Changed how the Middle ends symbol table works from a symbol class to a basic list.
-Allow the register keyword for storing local vars to a register rather then stack.
-Improved documentation for all interfaces.

Todo
-Change how storeing and loading is used. Next update the symbol table will store the C_ast 
decleration node insted of all the data in a list.
-Add module in backend for light optomization of the C code to remove dead and redundent code no more "DEC,SP,SP,03 INC,SP,SP,03".
-Update the JZ-101 into the JZ-102. need a debug mode inturupt circuitry and jumping/branching needs to be done by address offset not raw address
-Will take break will start work on new JZ on the 8th of febuary. 
